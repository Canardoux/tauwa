// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/mimi.dart';
import 'api/simple.dart';
import 'api/toto.dart';
import 'api/webaudio.dart';
import 'api/zozo.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -2052328726;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'tauwa',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiMimiMimi();

  String crateApiSimpleGreet({required String name});

  void crateApiSimpleInitApp();

  bool crateApiSimpleInitTauCore();

  void crateApiSimpleRustSetLogLevel({required int level});

  Stream<LogEntry> crateApiSimpleTraceLogger();

  String crateApiTotoToto();

  String crateApiTotoZozo();

  AnalyserNode crateApiWebaudioAudioContextCreateAnalyser(
      {required AudioContext that});

  BiquadFilterNode crateApiWebaudioAudioContextCreateBiquadFilter(
      {required AudioContext that});

  AudioBuffer crateApiWebaudioAudioContextCreateBuffer(
      {required AudioContext that,
      required int numberOfChannels,
      required int length,
      required int sampleRate});

  AudioBufferSourceNode crateApiWebaudioAudioContextCreateBufferSource(
      {required AudioContext that});

  ChannelMergerNode crateApiWebaudioAudioContextCreateChannelMerger(
      {required AudioContext that, int? numberOfInputs});

  ChannelSplitterNode crateApiWebaudioAudioContextCreateChannelSplitter(
      {required AudioContext that, int? numberOfOutputs});

  ConstantSourceNode crateApiWebaudioAudioContextCreateConstantSource(
      {required AudioContext that});

  ConvolverNode crateApiWebaudioAudioContextCreateConvolver(
      {required AudioContext that});

  DelayNode crateApiWebaudioAudioContextCreateDelay(
      {required AudioContext that, double? maxDelayTime});

  DynamicsCompressorNode crateApiWebaudioAudioContextCreateDynamicsCompressor(
      {required AudioContext that});

  GainNode crateApiWebaudioAudioContextCreateGain({required AudioContext that});

  IirFilterNode crateApiWebaudioAudioContextCreateIirFilter(
      {required AudioContext that,
      required JsArrayF64 feedforward,
      required JsArrayF64 feedback});

  OscillatorNode crateApiWebaudioAudioContextCreateOscillator(
      {required AudioContext that});

  PannerNode crateApiWebaudioAudioContextCreatePanner(
      {required AudioContext that});

  PeriodicWave crateApiWebaudioAudioContextCreatePeriodicWave(
      {required AudioContext that,
      required JsArrayF64 real,
      required JsArrayF64 imag,
      PeriodicWaveConstraints? constraints});

  ScriptProcessorNode crateApiWebaudioAudioContextCreateScriptProcessor(
      {required AudioContext that,
      int? bufferSize,
      int? numberOfInputChannels,
      int? numberOfOutputChannels});

  StereoPannerNode crateApiWebaudioAudioContextCreateStereoPanner(
      {required AudioContext that});

  WaveShaperNode crateApiWebaudioAudioContextCreateWaveShaper(
      {required AudioContext that});

  JsPromiseAudioBuffer crateApiWebaudioAudioContextDecodeAudioData(
      {required AudioContext that, required JSArrayBuffer audioData});

  AudioWorklet crateApiWebaudioAudioContextGetAudioWorklet(
      {required AudioContext that});

  double crateApiWebaudioAudioContextGetCurrentTime(
      {required AudioContext that});

  void crateApiWebaudioAudioContextGetDelegate({required AudioContext that});

  AudioDestinationNode crateApiWebaudioAudioContextGetDestination(
      {required AudioContext that});

  AudioListener crateApiWebaudioAudioContextGetListener(
      {required AudioContext that});

  EventHandler crateApiWebaudioAudioContextGetOnstatechange(
      {required AudioContext that});

  double crateApiWebaudioAudioContextGetSampleRate(
      {required AudioContext that});

  String crateApiWebaudioAudioContextGetState({required AudioContext that});

  void crateApiWebaudioAudioContextSetOnstatechange(
      {required AudioContext that, required EventHandler value});

  int crateApiZozoSum({required int a, required int b});

  int crateApiZozoSumLongRunning({required int a, required int b});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnalyserNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnalyserNode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnalyserNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioBuffer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioBuffer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioBufferSourceNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioBufferSourceNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AudioBufferSourceNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioContext;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioDestinationNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioDestinationNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AudioDestinationNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioListener;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioListener;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AudioListenerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioWorklet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioWorklet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioWorkletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BiquadFilterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BiquadFilterNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BiquadFilterNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChannelMergerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChannelMergerNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChannelMergerNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChannelSplitterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChannelSplitterNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ChannelSplitterNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstantSourceNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstantSourceNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConstantSourceNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConvolverNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConvolverNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConvolverNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DelayNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DelayNode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DelayNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DynamicsCompressorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DynamicsCompressorNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DynamicsCompressorNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GainNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GainNode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GainNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IirFilterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IirFilterNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_IirFilterNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsArrayF64;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsArrayF64;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JsArrayF64Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsPromiseAudioBuffer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsPromiseAudioBuffer;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JsPromiseAudioBufferPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OscillatorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OscillatorNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OscillatorNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PannerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PannerNode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PannerNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PeriodicWave;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PeriodicWave;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PeriodicWavePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PeriodicWaveConstraints;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PeriodicWaveConstraints;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PeriodicWaveConstraintsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ScriptProcessorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ScriptProcessorNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ScriptProcessorNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StereoPannerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StereoPannerNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StereoPannerNodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WaveShaperNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WaveShaperNode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WaveShaperNodePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiMimiMimi() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMimiMimiConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMimiMimiConstMeta => const TaskConstMeta(
        debugName: "mimi",
        argNames: [],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  void crateApiSimpleInitApp() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  bool crateApiSimpleInitTauCore() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitTauCoreConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitTauCoreConstMeta => const TaskConstMeta(
        debugName: "init_tau_core",
        argNames: [],
      );

  @override
  void crateApiSimpleRustSetLogLevel({required int level}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(level, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleRustSetLogLevelConstMeta,
      argValues: [level],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleRustSetLogLevelConstMeta =>
      const TaskConstMeta(
        debugName: "rust_set_log_level",
        argNames: ["level"],
      );

  @override
  Stream<LogEntry> crateApiSimpleTraceLogger() {
    final sink = RustStreamSink<LogEntry>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleTraceLoggerConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSimpleTraceLoggerConstMeta => const TaskConstMeta(
        debugName: "trace_logger",
        argNames: ["sink"],
      );

  @override
  String crateApiTotoToto() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTotoTotoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTotoTotoConstMeta => const TaskConstMeta(
        debugName: "toto",
        argNames: [],
      );

  @override
  String crateApiTotoZozo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTotoZozoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTotoZozoConstMeta => const TaskConstMeta(
        debugName: "zozo",
        argNames: [],
      );

  @override
  AnalyserNode crateApiWebaudioAudioContextCreateAnalyser(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateAnalyserConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateAnalyserConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_analyser",
        argNames: ["that"],
      );

  @override
  BiquadFilterNode crateApiWebaudioAudioContextCreateBiquadFilter(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateBiquadFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateBiquadFilterConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_biquad_filter",
        argNames: ["that"],
      );

  @override
  AudioBuffer crateApiWebaudioAudioContextCreateBuffer(
      {required AudioContext that,
      required int numberOfChannels,
      required int length,
      required int sampleRate}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_CastedPrimitive_usize(numberOfChannels, serializer);
        sse_encode_CastedPrimitive_usize(length, serializer);
        sse_encode_CastedPrimitive_usize(sampleRate, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateBufferConstMeta,
      argValues: [that, numberOfChannels, length, sampleRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateBufferConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_buffer",
        argNames: ["that", "numberOfChannels", "length", "sampleRate"],
      );

  @override
  AudioBufferSourceNode crateApiWebaudioAudioContextCreateBufferSource(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateBufferSourceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateBufferSourceConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_buffer_source",
        argNames: ["that"],
      );

  @override
  ChannelMergerNode crateApiWebaudioAudioContextCreateChannelMerger(
      {required AudioContext that, int? numberOfInputs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_opt_CastedPrimitive_usize(numberOfInputs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateChannelMergerConstMeta,
      argValues: [that, numberOfInputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateChannelMergerConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_channel_merger",
        argNames: ["that", "numberOfInputs"],
      );

  @override
  ChannelSplitterNode crateApiWebaudioAudioContextCreateChannelSplitter(
      {required AudioContext that, int? numberOfOutputs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_opt_CastedPrimitive_usize(numberOfOutputs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateChannelSplitterConstMeta,
      argValues: [that, numberOfOutputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWebaudioAudioContextCreateChannelSplitterConstMeta =>
          const TaskConstMeta(
            debugName: "AudioContext_create_channel_splitter",
            argNames: ["that", "numberOfOutputs"],
          );

  @override
  ConstantSourceNode crateApiWebaudioAudioContextCreateConstantSource(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateConstantSourceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWebaudioAudioContextCreateConstantSourceConstMeta =>
          const TaskConstMeta(
            debugName: "AudioContext_create_constant_source",
            argNames: ["that"],
          );

  @override
  ConvolverNode crateApiWebaudioAudioContextCreateConvolver(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateConvolverConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateConvolverConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_convolver",
        argNames: ["that"],
      );

  @override
  DelayNode crateApiWebaudioAudioContextCreateDelay(
      {required AudioContext that, double? maxDelayTime}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_opt_box_autoadd_f_64(maxDelayTime, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateDelayConstMeta,
      argValues: [that, maxDelayTime],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateDelayConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_delay",
        argNames: ["that", "maxDelayTime"],
      );

  @override
  DynamicsCompressorNode crateApiWebaudioAudioContextCreateDynamicsCompressor(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateDynamicsCompressorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWebaudioAudioContextCreateDynamicsCompressorConstMeta =>
          const TaskConstMeta(
            debugName: "AudioContext_create_dynamics_compressor",
            argNames: ["that"],
          );

  @override
  GainNode crateApiWebaudioAudioContextCreateGain(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateGainConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateGainConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_gain",
        argNames: ["that"],
      );

  @override
  IirFilterNode crateApiWebaudioAudioContextCreateIirFilter(
      {required AudioContext that,
      required JsArrayF64 feedforward,
      required JsArrayF64 feedback}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
            feedforward, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
            feedback, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateIirFilterConstMeta,
      argValues: [that, feedforward, feedback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateIirFilterConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_iir_filter",
        argNames: ["that", "feedforward", "feedback"],
      );

  @override
  OscillatorNode crateApiWebaudioAudioContextCreateOscillator(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateOscillatorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateOscillatorConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_oscillator",
        argNames: ["that"],
      );

  @override
  PannerNode crateApiWebaudioAudioContextCreatePanner(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreatePannerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreatePannerConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_panner",
        argNames: ["that"],
      );

  @override
  PeriodicWave crateApiWebaudioAudioContextCreatePeriodicWave(
      {required AudioContext that,
      required JsArrayF64 real,
      required JsArrayF64 imag,
      PeriodicWaveConstraints? constraints}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
            real, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
            imag, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
            constraints, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreatePeriodicWaveConstMeta,
      argValues: [that, real, imag, constraints],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreatePeriodicWaveConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_periodic_wave",
        argNames: ["that", "real", "imag", "constraints"],
      );

  @override
  ScriptProcessorNode crateApiWebaudioAudioContextCreateScriptProcessor(
      {required AudioContext that,
      int? bufferSize,
      int? numberOfInputChannels,
      int? numberOfOutputChannels}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_opt_CastedPrimitive_usize(bufferSize, serializer);
        sse_encode_opt_CastedPrimitive_usize(numberOfInputChannels, serializer);
        sse_encode_opt_CastedPrimitive_usize(
            numberOfOutputChannels, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateScriptProcessorConstMeta,
      argValues: [
        that,
        bufferSize,
        numberOfInputChannels,
        numberOfOutputChannels
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWebaudioAudioContextCreateScriptProcessorConstMeta =>
          const TaskConstMeta(
            debugName: "AudioContext_create_script_processor",
            argNames: [
              "that",
              "bufferSize",
              "numberOfInputChannels",
              "numberOfOutputChannels"
            ],
          );

  @override
  StereoPannerNode crateApiWebaudioAudioContextCreateStereoPanner(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateStereoPannerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateStereoPannerConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_stereo_panner",
        argNames: ["that"],
      );

  @override
  WaveShaperNode crateApiWebaudioAudioContextCreateWaveShaper(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextCreateWaveShaperConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextCreateWaveShaperConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_create_wave_shaper",
        argNames: ["that"],
      );

  @override
  JsPromiseAudioBuffer crateApiWebaudioAudioContextDecodeAudioData(
      {required AudioContext that, required JSArrayBuffer audioData}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_box_autoadd_js_array_buffer(audioData, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextDecodeAudioDataConstMeta,
      argValues: [that, audioData],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextDecodeAudioDataConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_decodeAudioData",
        argNames: ["that", "audioData"],
      );

  @override
  AudioWorklet crateApiWebaudioAudioContextGetAudioWorklet(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetAudioWorkletConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetAudioWorkletConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_audio_worklet",
        argNames: ["that"],
      );

  @override
  double crateApiWebaudioAudioContextGetCurrentTime(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetCurrentTimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetCurrentTimeConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_current_time",
        argNames: ["that"],
      );

  @override
  void crateApiWebaudioAudioContextGetDelegate({required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetDelegateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetDelegateConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_delegate",
        argNames: ["that"],
      );

  @override
  AudioDestinationNode crateApiWebaudioAudioContextGetDestination(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetDestinationConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetDestinationConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_destination",
        argNames: ["that"],
      );

  @override
  AudioListener crateApiWebaudioAudioContextGetListener(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetListenerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetListenerConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_listener",
        argNames: ["that"],
      );

  @override
  EventHandler crateApiWebaudioAudioContextGetOnstatechange(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_event_handler,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetOnstatechangeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetOnstatechangeConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_onstatechange",
        argNames: ["that"],
      );

  @override
  double crateApiWebaudioAudioContextGetSampleRate(
      {required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetSampleRateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetSampleRateConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_sample_rate",
        argNames: ["that"],
      );

  @override
  String crateApiWebaudioAudioContextGetState({required AudioContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextGetStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextGetStateConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_get_state",
        argNames: ["that"],
      );

  @override
  void crateApiWebaudioAudioContextSetOnstatechange(
      {required AudioContext that, required EventHandler value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
            that, serializer);
        sse_encode_box_autoadd_event_handler(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebaudioAudioContextSetOnstatechangeConstMeta,
      argValues: [that, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebaudioAudioContextSetOnstatechangeConstMeta =>
      const TaskConstMeta(
        debugName: "AudioContext_set_onstatechange",
        argNames: ["that", "value"],
      );

  @override
  int crateApiZozoSum({required int a, required int b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_usize(a, serializer);
        sse_encode_CastedPrimitive_usize(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZozoSumConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZozoSumConstMeta => const TaskConstMeta(
        debugName: "sum",
        argNames: ["a", "b"],
      );

  @override
  int crateApiZozoSumLongRunning({required int a, required int b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_usize(a, serializer);
        sse_encode_CastedPrimitive_usize(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZozoSumLongRunningConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZozoSumLongRunningConstMeta => const TaskConstMeta(
        debugName: "sum_long_running",
        argNames: ["a", "b"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnalyserNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnalyserNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioBuffer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioBuffer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioBufferSourceNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioBufferSourceNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioContext => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioDestinationNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioDestinationNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioListener => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioListener => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AudioWorklet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AudioWorklet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BiquadFilterNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BiquadFilterNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChannelMergerNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChannelMergerNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChannelSplitterNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChannelSplitterNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstantSourceNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstantSourceNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConvolverNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConvolverNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DelayNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DelayNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DynamicsCompressorNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DynamicsCompressorNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GainNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GainNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IirFilterNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IirFilterNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsArrayF64 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsArrayF64 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsPromiseAudioBuffer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsPromiseAudioBuffer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OscillatorNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OscillatorNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PannerNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PannerNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PeriodicWave => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PeriodicWave => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PeriodicWaveConstraints => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PeriodicWaveConstraints => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ScriptProcessorNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ScriptProcessorNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StereoPannerNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StereoPannerNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WaveShaperNode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WaveShaperNode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AnalyserNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioBuffer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioBufferSourceNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioContext
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioDestinationNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioListener
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioListenerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioWorklet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioWorkletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BiquadFilterNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChannelMergerNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChannelMergerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChannelSplitterNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChannelSplitterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstantSourceNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvolverNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DelayNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DelayNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DynamicsCompressorNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DynamicsCompressorNodeImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  GainNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GainNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IirFilterNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IirFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsArrayF64
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsArrayF64Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsPromiseAudioBuffer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsPromiseAudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OscillatorNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PannerNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PeriodicWave
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeriodicWaveImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PeriodicWaveConstraints
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeriodicWaveConstraintsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ScriptProcessorNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScriptProcessorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StereoPannerNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StereoPannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaveShaperNode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioContext
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  int dco_decode_CastedPrimitive_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  AnalyserNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioBuffer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioBufferSourceNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioContext
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioDestinationNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioListener
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioListenerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AudioWorklet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioWorkletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BiquadFilterNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChannelMergerNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChannelMergerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChannelSplitterNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChannelSplitterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstantSourceNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvolverNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DelayNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DelayNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DynamicsCompressorNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DynamicsCompressorNodeImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  GainNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GainNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IirFilterNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IirFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsArrayF64
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsArrayF64Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsPromiseAudioBuffer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsPromiseAudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OscillatorNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PannerNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PeriodicWave
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeriodicWaveImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PeriodicWaveConstraints
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeriodicWaveConstraintsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ScriptProcessorNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScriptProcessorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StereoPannerNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StereoPannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaveShaperNode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BaseAudioContext dco_decode_TraitDef_BaseAudioContext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PeriodicWaveConstraints
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
        raw);
  }

  @protected
  EventHandler dco_decode_box_autoadd_event_handler(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_event_handler(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  JSArrayBuffer dco_decode_box_autoadd_js_array_buffer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_js_array_buffer(raw);
  }

  @protected
  EventHandler dco_decode_event_handler(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EventHandler();
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  JSArrayBuffer dco_decode_js_array_buffer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return JSArrayBuffer();
  }

  @protected
  Level dco_decode_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Level.values[raw as int];
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_CastedPrimitive_i_64(arr[0]),
      msg: dco_decode_String(arr[1]),
      logLevel: dco_decode_level(arr[2]),
      lbl: dco_decode_String(arr[3]),
    );
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_usize(raw);
  }

  @protected
  PeriodicWaveConstraints?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
            raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AnalyserNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnalyserNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioBuffer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioBufferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioBufferSourceNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioBufferSourceNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioContext
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioDestinationNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioDestinationNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioListener
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioListenerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioWorklet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioWorkletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BiquadFilterNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BiquadFilterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChannelMergerNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChannelMergerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChannelSplitterNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChannelSplitterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstantSourceNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstantSourceNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConvolverNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvolverNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DelayNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DelayNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DynamicsCompressorNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DynamicsCompressorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GainNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GainNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IirFilterNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IirFilterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsArrayF64
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsArrayF64Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsPromiseAudioBuffer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsPromiseAudioBufferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OscillatorNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OscillatorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PannerNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PannerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PeriodicWave
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeriodicWaveImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PeriodicWaveConstraints
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeriodicWaveConstraintsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ScriptProcessorNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScriptProcessorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StereoPannerNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StereoPannerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WaveShaperNode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaveShaperNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioContext
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  AnalyserNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnalyserNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioBuffer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioBufferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioBufferSourceNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioBufferSourceNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioContext
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioDestinationNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioDestinationNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioListener
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioListenerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AudioWorklet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AudioWorkletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BiquadFilterNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BiquadFilterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChannelMergerNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChannelMergerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChannelSplitterNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChannelSplitterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstantSourceNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstantSourceNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConvolverNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvolverNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DelayNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DelayNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DynamicsCompressorNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DynamicsCompressorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GainNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GainNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IirFilterNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IirFilterNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsArrayF64
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsArrayF64Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsPromiseAudioBuffer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsPromiseAudioBufferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OscillatorNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OscillatorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PannerNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PannerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PeriodicWave
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeriodicWaveImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PeriodicWaveConstraints
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeriodicWaveConstraintsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ScriptProcessorNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScriptProcessorNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StereoPannerNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StereoPannerNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WaveShaperNode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaveShaperNodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PeriodicWaveConstraints
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
        deserializer));
  }

  @protected
  EventHandler sse_decode_box_autoadd_event_handler(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_event_handler(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  JSArrayBuffer sse_decode_box_autoadd_js_array_buffer(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_js_array_buffer(deserializer));
  }

  @protected
  EventHandler sse_decode_event_handler(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventHandler();
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  JSArrayBuffer sse_decode_js_array_buffer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JSArrayBuffer();
  }

  @protected
  Level sse_decode_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Level.values[inner];
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_msg = sse_decode_String(deserializer);
    var var_logLevel = sse_decode_level(deserializer);
    var var_lbl = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        msg: var_msg,
        logLevel: var_logLevel,
        lbl: var_lbl);
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PeriodicWaveConstraints?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          AnalyserNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AnalyserNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          AudioBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioBufferImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          AudioBufferSourceNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          AudioContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioContextImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          AudioDestinationNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioDestinationNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          AudioListener self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioListenerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          AudioWorklet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioWorkletImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          BiquadFilterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BiquadFilterNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          ChannelMergerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChannelMergerNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          ChannelSplitterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChannelSplitterNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          ConstantSourceNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstantSourceNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          ConvolverNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConvolverNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          DelayNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DelayNodeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          DynamicsCompressorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DynamicsCompressorNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          GainNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as GainNodeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          IirFilterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IirFilterNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          JsArrayF64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsArrayF64Impl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          JsPromiseAudioBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsPromiseAudioBufferImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          OscillatorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OscillatorNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          PannerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PannerNodeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          PeriodicWave self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PeriodicWaveImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          PeriodicWaveConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PeriodicWaveConstraintsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          ScriptProcessorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScriptProcessorNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          StereoPannerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StereoPannerNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          WaveShaperNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WaveShaperNodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          AudioContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioContextImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(sseEncodeCastedPrimitiveI64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(
          AnalyserNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AnalyserNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(
          AudioBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioBufferImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(
          AudioBufferSourceNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(
          AudioContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(
          AudioDestinationNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioDestinationNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(
          AudioListener self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioListenerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorklet(
          AudioWorklet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AudioWorkletImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(
          BiquadFilterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BiquadFilterNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(
          ChannelMergerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChannelMergerNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(
          ChannelSplitterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChannelSplitterNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(
          ConstantSourceNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstantSourceNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(
          ConvolverNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConvolverNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(
          DelayNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DelayNodeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(
          DynamicsCompressorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DynamicsCompressorNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(
          GainNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as GainNodeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(
          IirFilterNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IirFilterNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSArrayf64(
          JsArrayF64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsArrayF64Impl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJSPromiseAudioBuffer(
          JsPromiseAudioBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsPromiseAudioBufferImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(
          OscillatorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OscillatorNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(
          PannerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PannerNodeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(
          PeriodicWave self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PeriodicWaveImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          PeriodicWaveConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PeriodicWaveConstraintsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(
          ScriptProcessorNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScriptProcessorNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(
          StereoPannerNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StereoPannerNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(
          WaveShaperNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WaveShaperNodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          PeriodicWaveConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_handler(
      EventHandler self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_event_handler(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_js_array_buffer(
      JSArrayBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_js_array_buffer(self, serializer);
  }

  @protected
  void sse_encode_event_handler(EventHandler self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_js_array_buffer(
      JSArrayBuffer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_level(Level self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_i_64(self.timeMillis, serializer);
    sse_encode_String(self.msg, serializer);
    sse_encode_level(self.logLevel, serializer);
    sse_encode_String(self.lbl, serializer);
  }

  @protected
  void sse_encode_opt_CastedPrimitive_usize(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_usize(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          PeriodicWaveConstraints? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWaveConstraints(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AnalyserNodeImpl extends RustOpaque implements AnalyserNode {
  // Not to be used by end users
  AnalyserNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AnalyserNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AnalyserNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnalyserNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnalyserNodePtr,
  );
}

@sealed
class AudioBufferImpl extends RustOpaque implements AudioBuffer {
  // Not to be used by end users
  AudioBufferImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioBufferImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioBuffer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioBuffer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioBufferPtr,
  );
}

@sealed
class AudioBufferSourceNodeImpl extends RustOpaque
    implements AudioBufferSourceNode {
  // Not to be used by end users
  AudioBufferSourceNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioBufferSourceNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AudioBufferSourceNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioBufferSourceNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioBufferSourceNodePtr,
  );
}

@sealed
class AudioContextImpl extends RustOpaque implements AudioContext {
  // Not to be used by end users
  AudioContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioContext,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioContext,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioContextPtr,
  );

  /// The `createAnalyser()` method of the
  /// [BaseAudioContext] interface creates an [AnalyserNode], which
  /// can be used to expose audio time and frequency data and create data
  /// visualizations.
  ///
  /// > **Note:** The [AnalyserNode.AnalyserNode] constructor is the
  /// > recommended way to create an [AnalyserNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  ///
  /// > **Note:** For more on using this node, see the
  /// > [AnalyserNode] page.
  AnalyserNode createAnalyser() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateAnalyser(
        that: this,
      );

  /// The `createBiquadFilter()` method of the [BaseAudioContext]
  /// interface creates a [BiquadFilterNode], which represents a second order
  /// filter configurable as several different common filter types.
  ///
  /// > **Note:** The [BiquadFilterNode.BiquadFilterNode] constructor is the
  /// > recommended way to create a [BiquadFilterNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  BiquadFilterNode createBiquadFilter() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateBiquadFilter(
        that: this,
      );

  /// The `createBuffer()` method of the [BaseAudioContext]
  /// Interface is used to create a new, empty [AudioBuffer] object, which
  /// can then be populated by data, and played via an [AudioBufferSourceNode].
  ///
  /// For more details about audio buffers, check out the [AudioBuffer]
  /// reference page.
  ///
  /// > **Note:** `createBuffer()` used to be able to take compressed
  /// > data and give back decoded samples, but this ability was removed from
  /// > the specification,
  /// > because all the decoding was done on the main thread, so
  /// > `createBuffer()` was blocking other code execution. The asynchronous
  /// > method
  /// > `decodeAudioData()` does the same thing — takes compressed audio, such
  /// > as an
  /// > MP3 file, and directly gives you back an [AudioBuffer] that you can
  /// > then play via an [AudioBufferSourceNode]. For simple use cases
  /// > like playing an MP3, `decodeAudioData()` is what you should be using.
  AudioBuffer createBuffer(
          {required int numberOfChannels,
          required int length,
          required int sampleRate}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateBuffer(
          that: this,
          numberOfChannels: numberOfChannels,
          length: length,
          sampleRate: sampleRate);

  /// The `createBufferSource()` method of the [BaseAudioContext]
  /// Interface is used to create a new [AudioBufferSourceNode], which can be
  /// used to play audio data contained within an [AudioBuffer] object.
  /// [AudioBuffer]s are created using [BaseAudioContext.createBuffer] or
  /// returned by [BaseAudioContext.decodeAudioData] when it successfully
  /// decodes an audio track.
  ///
  /// > **Note:** The [AudioBufferSourceNode.AudioBufferSourceNode]
  /// > constructor is the recommended way to create a [AudioBufferSourceNode];
  /// > see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  AudioBufferSourceNode createBufferSource() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateBufferSource(
        that: this,
      );

  /// The `createChannelMerger()` method of the [BaseAudioContext] interface
  /// creates a [ChannelMergerNode],
  /// which combines channels from multiple audio streams into a single audio
  /// stream.
  ///
  /// > **Note:** The [ChannelMergerNode.ChannelMergerNode] constructor is the
  /// > recommended way to create a [ChannelMergerNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  ChannelMergerNode createChannelMerger({int? numberOfInputs}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateChannelMerger(
          that: this, numberOfInputs: numberOfInputs);

  /// The `createChannelSplitter()` method of the [BaseAudioContext] Interface
  /// is used to create a [ChannelSplitterNode],
  /// which is used to access the individual channels of an audio stream and
  /// process them separately.
  ///
  /// > **Note:** The [ChannelSplitterNode.ChannelSplitterNode]
  /// > constructor is the recommended way to create a [ChannelSplitterNode];
  /// > see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  ChannelSplitterNode createChannelSplitter({int? numberOfOutputs}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateChannelSplitter(
          that: this, numberOfOutputs: numberOfOutputs);

  /// The **`createConstantSource()`**
  /// property of the [BaseAudioContext] interface creates a
  /// [ConstantSourceNode] object, which is an audio source that continuously
  /// outputs a monaural (one-channel) sound signal whose samples all have the
  /// same
  /// value.
  ///
  /// > **Note:** The [ConstantSourceNode.ConstantSourceNode]
  /// > constructor is the recommended way to create a [ConstantSourceNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  ConstantSourceNode createConstantSource() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateConstantSource(
        that: this,
      );

  /// The `createConvolver()` method of the [BaseAudioContext]
  /// interface creates a [ConvolverNode], which is commonly used to apply
  /// reverb effects to your audio. See the
  /// [spec definition of Convolution](https://webaudio.github.io/web-audio-api/#background-3)
  /// for more information.
  ///
  /// > **Note:** The [ConvolverNode.ConvolverNode]
  /// > constructor is the recommended way to create a [ConvolverNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  ConvolverNode createConvolver() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateConvolver(
        that: this,
      );

  /// The `createDelay()` method of the
  /// [BaseAudioContext] Interface is used to create a [DelayNode],
  /// which is used to delay the incoming audio signal by a certain amount of
  /// time.
  ///
  /// > **Note:** The [DelayNode.DelayNode]
  /// > constructor is the recommended way to create a [DelayNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  DelayNode createDelay({double? maxDelayTime}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateDelay(
          that: this, maxDelayTime: maxDelayTime);

  /// The `createDynamicsCompressor()` method of the [BaseAudioContext]
  /// Interface is used to create a [DynamicsCompressorNode], which can be used
  /// to apply compression to an audio signal.
  ///
  /// Compression lowers the volume of the loudest parts of the signal and
  /// raises the volume
  /// of the softest parts. Overall, a louder, richer, and fuller sound can be
  /// achieved. It is
  /// especially important in games and musical applications where large numbers
  /// of individual
  /// sounds are played simultaneously, where you want to control the overall
  /// signal level and
  /// help avoid clipping (distorting) of the audio output.
  ///
  /// > **Note:** The [DynamicsCompressorNode.DynamicsCompressorNode]
  /// > constructor is the recommended way to create a [DynamicsCompressorNode];
  /// > see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  DynamicsCompressorNode createDynamicsCompressor() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateDynamicsCompressor(
        that: this,
      );

  /// The `createGain()` method of the [BaseAudioContext]
  /// interface creates a [GainNode], which can be used to control the
  /// overall gain (or volume) of the audio graph.
  ///
  /// > **Note:** The [GainNode.GainNode]
  /// > constructor is the recommended way to create a [GainNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  GainNode createGain() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateGain(
        that: this,
      );

  /// The **`createIIRFilter()`** method of the [BaseAudioContext] interface
  /// creates an [IIRFilterNode], which represents a general
  /// **[infinite impulse response](https://en.wikipedia.org/wiki/Infinite_impulse_response)**
  /// (IIR) filter which can be configured to serve as various types of filter.
  ///
  /// > **Note:** The [IIRFilterNode.IIRFilterNode]
  /// > constructor is the recommended way to create a [IIRFilterNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  IirFilterNode createIirFilter(
          {required JsArrayF64 feedforward, required JsArrayF64 feedback}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateIirFilter(
          that: this, feedforward: feedforward, feedback: feedback);

  /// The `createOscillator()` method of the [BaseAudioContext]
  /// interface creates an [OscillatorNode], a source representing a periodic
  /// waveform. It basically generates a constant tone.
  ///
  /// > **Note:** The [OscillatorNode.OscillatorNode]
  /// > constructor is the recommended way to create a [OscillatorNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  OscillatorNode createOscillator() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateOscillator(
        that: this,
      );

  /// The `createPanner()` method of the [BaseAudioContext]
  /// Interface is used to create a new [PannerNode], which is used to
  /// spatialize an incoming audio stream in 3D space.
  ///
  /// The panner node is spatialized in relation to the AudioContext's
  /// [AudioListener] (defined by the [BaseAudioContext.listener]
  /// attribute), which represents the position and orientation of the person
  /// listening to the
  /// audio.
  ///
  /// > **Note:** The [PannerNode.PannerNode]
  /// > constructor is the recommended way to create a [PannerNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  PannerNode createPanner() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreatePanner(
        that: this,
      );

  /// The `createPeriodicWave()` method of the [BaseAudioContext] Interface
  /// is used to create a [PeriodicWave], which is used to define a periodic
  /// waveform
  /// that can be used to shape the output of an [OscillatorNode].
  PeriodicWave createPeriodicWave(
          {required JsArrayF64 real,
          required JsArrayF64 imag,
          PeriodicWaveConstraints? constraints}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreatePeriodicWave(
          that: this, real: real, imag: imag, constraints: constraints);

  /// The `createScriptProcessor()` method of the [BaseAudioContext] interface
  /// creates a [ScriptProcessorNode] used for direct audio processing.
  ///
  /// > **Note:** This feature was replaced by
  /// > [AudioWorklets](https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet)
  /// > and the [AudioWorkletNode] interface.
  ScriptProcessorNode createScriptProcessor(
          {int? bufferSize,
          int? numberOfInputChannels,
          int? numberOfOutputChannels}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateScriptProcessor(
          that: this,
          bufferSize: bufferSize,
          numberOfInputChannels: numberOfInputChannels,
          numberOfOutputChannels: numberOfOutputChannels);

  /// The `createStereoPanner()` method of the [BaseAudioContext] interface
  /// creates a [StereoPannerNode], which can be used to apply
  /// stereo panning to an audio source.
  /// It positions an incoming audio stream in a stereo image using a
  /// [low-cost panning algorithm](https://webaudio.github.io/web-audio-api/#stereopanner-algorithm).
  ///
  /// > **Note:** The [StereoPannerNode.StereoPannerNode]
  /// > constructor is the recommended way to create a [StereoPannerNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  StereoPannerNode createStereoPanner() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateStereoPanner(
        that: this,
      );

  /// The `createWaveShaper()` method of the [BaseAudioContext]
  /// interface creates a [WaveShaperNode], which represents a non-linear
  /// distortion. It is used to apply distortion effects to your audio.
  ///
  /// > **Note:** The [WaveShaperNode.WaveShaperNode]
  /// > constructor is the recommended way to create a [WaveShaperNode]; see
  /// > [Creating an AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode#creating_an_audionode).
  WaveShaperNode createWaveShaper() =>
      RustLib.instance.api.crateApiWebaudioAudioContextCreateWaveShaper(
        that: this,
      );

  /// The `decodeAudioData()` method of the [BaseAudioContext]
  /// Interface is used to asynchronously decode audio file data contained in an
  /// `ArrayBuffer` that is loaded from [fetch],
  /// [XMLHttpRequest], or [FileReader]. The decoded
  /// [AudioBuffer] is resampled to the [AudioContext]'s sampling
  /// rate, then passed to a callback or promise.
  ///
  /// This is the preferred method of creating an audio source for Web Audio API
  /// from an
  /// audio track. This method only works on complete file data, not fragments
  /// of audio file
  /// data.
  ///
  /// This function implements two alternative ways to asynchronously return the
  /// audio data or error messages: it returns a `Promise` that fulfills with
  /// the audio data, and also accepts callback arguments to handle success or
  /// failure. The primary method of interfacing with this function is via its
  /// Promise return value, and the callback parameters are provided for legacy
  /// reasons.
  JsPromiseAudioBuffer decodeAudioData({required JSArrayBuffer audioData}) =>
      RustLib.instance.api.crateApiWebaudioAudioContextDecodeAudioData(
          that: this, audioData: audioData);

  /// The `audioWorklet` read-only property of the
  /// [BaseAudioContext] interface returns an instance of
  /// [AudioWorklet] that can be used for adding
  /// [AudioWorkletProcessor]-derived classes which implement custom audio
  /// processing.
  AudioWorklet getAudioWorklet() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetAudioWorklet(
        that: this,
      );

  /// The `currentTime` read-only property of the [BaseAudioContext]
  /// interface returns a double representing an ever-increasing hardware
  /// timestamp in seconds that
  /// can be used for scheduling audio playback, visualizing timelines, etc. It
  /// starts at 0.
  double getCurrentTime() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetCurrentTime(
        that: this,
      );

  void getDelegate() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetDelegate(
        that: this,
      );

  /// The `destination` property of the [BaseAudioContext]
  /// interface returns an [AudioDestinationNode] representing the final
  /// destination of all audio in the context. It often represents an actual
  /// audio-rendering
  /// device such as your device's speakers.
  AudioDestinationNode getDestination() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetDestination(
        that: this,
      );

  /// The `listener` property of the [BaseAudioContext] interface
  /// returns an [AudioListener] object that can then be used for
  /// implementing 3D audio spatialization.
  AudioListener getListener() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetListener(
        that: this,
      );

  EventHandler getOnstatechange() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetOnstatechange(
        that: this,
      );

  /// The `sampleRate` property of the [BaseAudioContext] interface returns a
  /// floating point number representing the sample rate, in samples per second,
  /// used by all nodes in this audio context.
  /// This limitation means that sample-rate converters are not supported.
  double getSampleRate() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetSampleRate(
        that: this,
      );

  /// The `state` read-only property of the [BaseAudioContext]
  /// interface returns the current state of the `AudioContext`.
  String getState() =>
      RustLib.instance.api.crateApiWebaudioAudioContextGetState(
        that: this,
      );

  void setOnstatechange({required EventHandler value}) => RustLib.instance.api
      .crateApiWebaudioAudioContextSetOnstatechange(that: this, value: value);
}

@sealed
class AudioDestinationNodeImpl extends RustOpaque
    implements AudioDestinationNode {
  // Not to be used by end users
  AudioDestinationNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioDestinationNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AudioDestinationNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioDestinationNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioDestinationNodePtr,
  );
}

@sealed
class AudioListenerImpl extends RustOpaque implements AudioListener {
  // Not to be used by end users
  AudioListenerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioListenerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioListener,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioListener,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioListenerPtr,
  );
}

@sealed
class AudioWorkletImpl extends RustOpaque implements AudioWorklet {
  // Not to be used by end users
  AudioWorkletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioWorkletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioWorklet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioWorklet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioWorkletPtr,
  );
}

@sealed
class BiquadFilterNodeImpl extends RustOpaque implements BiquadFilterNode {
  // Not to be used by end users
  BiquadFilterNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BiquadFilterNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BiquadFilterNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BiquadFilterNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BiquadFilterNodePtr,
  );
}

@sealed
class ChannelMergerNodeImpl extends RustOpaque implements ChannelMergerNode {
  // Not to be used by end users
  ChannelMergerNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChannelMergerNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChannelMergerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChannelMergerNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelMergerNodePtr,
  );
}

@sealed
class ChannelSplitterNodeImpl extends RustOpaque
    implements ChannelSplitterNode {
  // Not to be used by end users
  ChannelSplitterNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChannelSplitterNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ChannelSplitterNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelSplitterNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelSplitterNodePtr,
  );
}

@sealed
class ConstantSourceNodeImpl extends RustOpaque implements ConstantSourceNode {
  // Not to be used by end users
  ConstantSourceNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConstantSourceNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConstantSourceNodePtr,
  );
}

@sealed
class ConvolverNodeImpl extends RustOpaque implements ConvolverNode {
  // Not to be used by end users
  ConvolverNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConvolverNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConvolverNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConvolverNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConvolverNodePtr,
  );
}

@sealed
class DelayNodeImpl extends RustOpaque implements DelayNode {
  // Not to be used by end users
  DelayNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DelayNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DelayNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DelayNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DelayNodePtr,
  );
}

@sealed
class DynamicsCompressorNodeImpl extends RustOpaque
    implements DynamicsCompressorNode {
  // Not to be used by end users
  DynamicsCompressorNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DynamicsCompressorNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DynamicsCompressorNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DynamicsCompressorNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DynamicsCompressorNodePtr,
  );
}

@sealed
class GainNodeImpl extends RustOpaque implements GainNode {
  // Not to be used by end users
  GainNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GainNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GainNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GainNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GainNodePtr,
  );
}

@sealed
class IirFilterNodeImpl extends RustOpaque implements IirFilterNode {
  // Not to be used by end users
  IirFilterNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IirFilterNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IirFilterNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IirFilterNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IirFilterNodePtr,
  );
}

@sealed
class JsArrayF64Impl extends RustOpaque implements JsArrayF64 {
  // Not to be used by end users
  JsArrayF64Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsArrayF64Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JsArrayF64,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JsArrayF64,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JsArrayF64Ptr,
  );
}

@sealed
class JsPromiseAudioBufferImpl extends RustOpaque
    implements JsPromiseAudioBuffer {
  // Not to be used by end users
  JsPromiseAudioBufferImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsPromiseAudioBufferImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_JsPromiseAudioBuffer,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_JsPromiseAudioBuffer,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_JsPromiseAudioBufferPtr,
  );
}

@sealed
class OscillatorNodeImpl extends RustOpaque implements OscillatorNode {
  // Not to be used by end users
  OscillatorNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OscillatorNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OscillatorNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OscillatorNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OscillatorNodePtr,
  );
}

@sealed
class PannerNodeImpl extends RustOpaque implements PannerNode {
  // Not to be used by end users
  PannerNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PannerNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PannerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNodePtr,
  );
}

@sealed
class PeriodicWaveConstraintsImpl extends RustOpaque
    implements PeriodicWaveConstraints {
  // Not to be used by end users
  PeriodicWaveConstraintsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PeriodicWaveConstraintsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_PeriodicWaveConstraints,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_PeriodicWaveConstraints,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_PeriodicWaveConstraintsPtr,
  );
}

@sealed
class PeriodicWaveImpl extends RustOpaque implements PeriodicWave {
  // Not to be used by end users
  PeriodicWaveImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PeriodicWaveImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PeriodicWave,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PeriodicWave,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PeriodicWavePtr,
  );
}

@sealed
class ScriptProcessorNodeImpl extends RustOpaque
    implements ScriptProcessorNode {
  // Not to be used by end users
  ScriptProcessorNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ScriptProcessorNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ScriptProcessorNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ScriptProcessorNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ScriptProcessorNodePtr,
  );
}

@sealed
class StereoPannerNodeImpl extends RustOpaque implements StereoPannerNode {
  // Not to be used by end users
  StereoPannerNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StereoPannerNodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_StereoPannerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_StereoPannerNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_StereoPannerNodePtr,
  );
}

@sealed
class WaveShaperNodeImpl extends RustOpaque implements WaveShaperNode {
  // Not to be used by end users
  WaveShaperNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WaveShaperNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WaveShaperNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WaveShaperNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WaveShaperNodePtr,
  );
}
